syntax = "proto3";

package carrental;
import "google/protobuf/empty.proto";

enum CarStatus {
    AVAILABLE = 0;
    UNAVAILABLE = 1;
}

service CarRental {
    rpc AddCar(AddCarRequest) returns (AddCarResponse);
    rpc ListAvailableCars(ListAvailableCarsRequest) returns (stream Car);
}

message Car {
    string numberPlate = 1;
    string make = 2;
    string model = 3;
    int32 year = 4;
    double dailyPrice = 5;
    double mileage = 6;
    CarStatus status = 7;
}

message Customer {
    string customerId = 1;
    string fullName = 2;
    string phoneNumber = 3;
    string role = 4;
}

message CartItem {
    string numberPlate = 1;
    string startDate = 2;
    string endDate = 3;
}

message Reservation {
    string reservationId = 1;
    string customerId = 2;
    repeated CartItem rentedCars = 3;
    double totalPrice = 4;
}

message AddCarRequest { Car car = 1; }
message AddCarResponse { string numberPlate = 1; }

message UpdateCarRequest { Car car = 1; }
message RemoveCarRequest { string numberPlate = 1; }
message RemoveCarResponse { repeated Car cars = 1; }

message SearchCarRequest { string plate = 1; }
message SearchCarResponse { Car car = 1; bool available = 2; }

message ListAvailableCarsRequest { string filter = 1; }

message Empty {}

message AddToCartRequest { string customerId = 1; CartItem item = 2; }

message PlaceReservationRequest { string customerId = 1; }
message PlaceReservationResponse { Reservation reservation = 1; }

message CreateCustomerRequest { repeated Customer customers = 1; }
message CreateCustomerResponse { string message = 1; }

service CarRentalSystem {
    rpc addCar(AddCarRequest) returns (AddCarResponse);
    rpc updateCar(UpdateCarRequest) returns (Empty);
    rpc removeCar(RemoveCarRequest) returns (RemoveCarResponse);
    rpc listAvailableCars(ListAvailableCarsRequest) returns (stream Car);
    rpc searchCar(SearchCarRequest) returns (SearchCarResponse);
    rpc addToCart(AddToCartRequest) returns (Empty);
    rpc placeReservation(PlaceReservationRequest) returns (PlaceReservationResponse);
    rpc createCustomer(CreateCustomerRequest) returns (CreateCustomerResponse);
}
